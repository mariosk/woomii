// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.woomii.beta.backend.transactions;

import com.woomii.beta.backend.transactions.Transactions;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Transactions_Roo_Jpa_ActiveRecord {
    
	@PersistenceContext(unitName="persistenceUnitProduction")
    transient EntityManager Transactions.entityManager;

    @PersistenceContext(unitName="persistenceUnitSandbox")
    transient EntityManager Transactions.sandBoxEntityManager;
    
    public static final EntityManager Transactions.entityManager() {
        EntityManager em = new Transactions().entityManager;
        if (em == null) throw new IllegalStateException("Production Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
     
    public static final EntityManager Transactions.sandboxEntityManager() {
        EntityManager em = new Transactions().sandBoxEntityManager;
        if (em == null) throw new IllegalStateException("Sandbox Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    @Transactional("transactionManagerProduction")
    public Transactions Transactions.mergeProduction() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Transactions merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }       
    
    @Transactional("transactionManagerSandbox")
    public Transactions Transactions.mergeSandbox() {
        if (this.sandBoxEntityManager == null) this.sandBoxEntityManager = sandboxEntityManager();
        Transactions merged = this.sandBoxEntityManager.merge(this);
        this.sandBoxEntityManager.flush();
        return merged;
    }
    
    public static final List<String> Transactions.fieldNames4OrderClauseFilter = java.util.Arrays.asList("campaign", "app", "created", "uuid_a", "uuid_b", "type", "credits_earned", "credits_redeemed");
       
    public static long Transactions.countTransactionses() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Transactions o", Long.class).getSingleResult();
    }
    
    public static List<Transactions> Transactions.findAllTransactionses() {
        return entityManager().createQuery("SELECT o FROM Transactions o", Transactions.class).getResultList();
    }
    
    public static List<Transactions> Transactions.findAllTransactionses(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Transactions o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Transactions.class).getResultList();
    }
    
    public static Transactions Transactions.findTransactions(Long id) {
        if (id == null) return null;
        return entityManager().find(Transactions.class, id);
    }
    
    public static List<Transactions> Transactions.findTransactionsEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Transactions o", Transactions.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<Transactions> Transactions.findTransactionsEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Transactions o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Transactions.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Transactions.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Transactions.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Transactions attached = Transactions.findTransactions(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Transactions.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Transactions.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Transactions Transactions.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Transactions merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
