// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.woomii.beta.frontend.campaigns;

import com.woomii.beta.frontend.campaigns.Campaigns;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Campaigns_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Campaigns.entityManager;
    
    public static final List<String> Campaigns.fieldNames4OrderClauseFilter = java.util.Arrays.asList("app", "status", "area_enabled", "launch_date", "expiration_date", "credits_expiration_date", "when_to_change_demographics", "num_of_credits_threshold", "num_of_credits", "num_of_referrals_threshold", "num_of_referrals", "name", "currency", "credits_earn_at_installation_usera", "credits_earn_at_installation_userb", "credits_earn_at_transaction", "rgbcolor");
    
    public static final EntityManager Campaigns.entityManager() {
        EntityManager em = new Campaigns().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Campaigns.countCampaignses() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Campaigns o", Long.class).getSingleResult();
    }
    
    public static List<Campaigns> Campaigns.findAllCampaignses() {
        return entityManager().createQuery("SELECT o FROM Campaigns o", Campaigns.class).getResultList();
    }
    
    public static List<Campaigns> Campaigns.findAllCampaignses(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Campaigns o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Campaigns.class).getResultList();
    }
    
    public static Campaigns Campaigns.findCampaigns(Long Id) {
        if (Id == null) return null;
        return entityManager().find(Campaigns.class, Id);
    }
    
    public static List<Campaigns> Campaigns.findCampaignsEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Campaigns o", Campaigns.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<Campaigns> Campaigns.findCampaignsEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Campaigns o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Campaigns.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Campaigns.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Campaigns.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Campaigns attached = Campaigns.findCampaigns(this.Id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Campaigns.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Campaigns.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Campaigns Campaigns.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Campaigns merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
