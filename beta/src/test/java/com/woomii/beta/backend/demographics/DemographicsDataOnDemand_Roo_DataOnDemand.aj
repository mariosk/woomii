// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.woomii.beta.backend.demographics;

import com.woomii.beta.backend.demographics.Demographics;
import com.woomii.beta.backend.demographics.DemographicsDataOnDemand;
import com.woomii.beta.backend.endusers.EndUsersDataOnDemand;
import com.woomii.beta.types.AgeRangeType;
import com.woomii.beta.types.SexType;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DemographicsDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DemographicsDataOnDemand: @Component;
    
    private Random DemographicsDataOnDemand.rnd = new SecureRandom();
    
    private List<Demographics> DemographicsDataOnDemand.data;
    
    @Autowired
    EndUsersDataOnDemand DemographicsDataOnDemand.endUsersDataOnDemand;
    
    public Demographics DemographicsDataOnDemand.getNewTransientDemographics(int index) {
        Demographics obj = new Demographics();
        setAge(obj, index);
        setEmail(obj, index);
        setFb_id(obj, index);
        setMobile(obj, index);
        setName(obj, index);
        setSex(obj, index);
        return obj;
    }
    
    public void DemographicsDataOnDemand.setAge(Demographics obj, int index) {
        AgeRangeType age = AgeRangeType.class.getEnumConstants()[0];
        obj.setAge(age);
    }
    
    public void DemographicsDataOnDemand.setEmail(Demographics obj, int index) {
        String email = "foo" + index + "@bar.com";
        if (email.length() > 32) {
            email = email.substring(0, 32);
        }
        obj.setEmail(email);
    }
    
    public void DemographicsDataOnDemand.setFb_id(Demographics obj, int index) {
        String fb_id = "fb_id_" + index;
        if (fb_id.length() > 16) {
            fb_id = fb_id.substring(0, 16);
        }
        obj.setFb_id(fb_id);
    }
    
    public void DemographicsDataOnDemand.setMobile(Demographics obj, int index) {
        String mobile = "mobile_" + index;
        if (mobile.length() > 16) {
            mobile = mobile.substring(0, 16);
        }
        obj.setMobile(mobile);
    }
    
    public void DemographicsDataOnDemand.setName(Demographics obj, int index) {
        String name = "name_" + index;
        if (name.length() > 64) {
            name = name.substring(0, 64);
        }
        obj.setName(name);
    }
    
    public void DemographicsDataOnDemand.setSex(Demographics obj, int index) {
        SexType sex = SexType.class.getEnumConstants()[0];
        obj.setSex(sex);
    }
    
    public Demographics DemographicsDataOnDemand.getSpecificDemographics(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Demographics obj = data.get(index);
        Long id = obj.getId();
        return Demographics.findDemographics(id);
    }
    
    public Demographics DemographicsDataOnDemand.getRandomDemographics() {
        init();
        Demographics obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Demographics.findDemographics(id);
    }
    
    public boolean DemographicsDataOnDemand.modifyDemographics(Demographics obj) {
        return false;
    }
    
    public void DemographicsDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Demographics.findDemographicsEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Demographics' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Demographics>();
        for (int i = 0; i < 10; i++) {
            Demographics obj = getNewTransientDemographics(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
