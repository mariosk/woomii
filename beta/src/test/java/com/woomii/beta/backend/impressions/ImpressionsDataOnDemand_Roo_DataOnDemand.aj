// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.woomii.beta.backend.impressions;

import com.woomii.beta.backend.impressions.Impressions;
import com.woomii.beta.backend.impressions.ImpressionsDataOnDemand;
import com.woomii.beta.frontend.apps.AppsDataOnDemand;
import com.woomii.beta.frontend.campaigns.CampaignsDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ImpressionsDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ImpressionsDataOnDemand: @Component;
    
    private Random ImpressionsDataOnDemand.rnd = new SecureRandom();
    
    private List<Impressions> ImpressionsDataOnDemand.data;
    
    @Autowired
    AppsDataOnDemand ImpressionsDataOnDemand.appsDataOnDemand;
    
    @Autowired
    CampaignsDataOnDemand ImpressionsDataOnDemand.campaignsDataOnDemand;
    
    public Impressions ImpressionsDataOnDemand.getNewTransientImpressions(int index) {
        Impressions obj = new Impressions();
        setAff_id(obj, index);
        setClicked(obj, index);
        setCreated(obj, index);
        setUuid_a(obj, index);
        return obj;
    }
    
    public void ImpressionsDataOnDemand.setAff_id(Impressions obj, int index) {
        String aff_id = "aff_id_" + index;
        if (aff_id.length() > 40) {
            aff_id = aff_id.substring(0, 40);
        }
        obj.setAff_id(aff_id);
    }
    
    public void ImpressionsDataOnDemand.setClicked(Impressions obj, int index) {
        Boolean clicked = Boolean.TRUE;
        obj.setClicked(clicked);
    }
    
    public void ImpressionsDataOnDemand.setCreated(Impressions obj, int index) {
        Date created = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreated(created);
    }
    
    public void ImpressionsDataOnDemand.setUuid_a(Impressions obj, int index) {
        String uuid_a = "uuid_a_" + index;
        if (uuid_a.length() > 40) {
            uuid_a = uuid_a.substring(0, 40);
        }
        obj.setUuid_a(uuid_a);
    }
    
    public Impressions ImpressionsDataOnDemand.getSpecificImpressions(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Impressions obj = data.get(index);
        Long id = obj.getId();
        return Impressions.findImpressions(id);
    }
    
    public Impressions ImpressionsDataOnDemand.getRandomImpressions() {
        init();
        Impressions obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Impressions.findImpressions(id);
    }
    
    public boolean ImpressionsDataOnDemand.modifyImpressions(Impressions obj) {
        return false;
    }
    
    public void ImpressionsDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Impressions.findImpressionsEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Impressions' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Impressions>();
        for (int i = 0; i < 10; i++) {
            Impressions obj = getNewTransientImpressions(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
