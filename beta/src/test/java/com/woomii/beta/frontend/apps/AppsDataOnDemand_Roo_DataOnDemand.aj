// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.woomii.beta.frontend.apps;

import com.woomii.beta.frontend.apps.Apps;
import com.woomii.beta.frontend.apps.AppsDataOnDemand;
import com.woomii.beta.frontend.customers.CustomersDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect AppsDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AppsDataOnDemand: @Component;
    
    private Random AppsDataOnDemand.rnd = new SecureRandom();
    
    private List<Apps> AppsDataOnDemand.data;
    
    @Autowired
    CustomersDataOnDemand AppsDataOnDemand.customersDataOnDemand;
    
    public Apps AppsDataOnDemand.getNewTransientApps(int index) {
        Apps obj = new Apps();
        setApp_id(obj, index);
        setBundle_id(obj, index);
        setCreated(obj, index);
        setDescription(obj, index);
        setLogo(obj, index);
        setRate(obj, index);
        setSdk_version(obj, index);
        return obj;
    }
    
    public void AppsDataOnDemand.setApp_id(Apps obj, int index) {
        String app_id = "app_id_" + index;
        if (app_id.length() > 40) {
            app_id = new Random().nextInt(10) + app_id.substring(1, 40);
        }
        obj.setApp_id(app_id);
    }
    
    public void AppsDataOnDemand.setBundle_id(Apps obj, int index) {
        String bundle_id = "bundle_id_" + index;
        if (bundle_id.length() > 64) {
            bundle_id = bundle_id.substring(0, 64);
        }
        obj.setBundle_id(bundle_id);
    }
    
    public void AppsDataOnDemand.setCreated(Apps obj, int index) {
        Date created = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreated(created);
    }
    
    public void AppsDataOnDemand.setDescription(Apps obj, int index) {
        String description = "description_" + index;
        if (description.length() > 255) {
            description = description.substring(0, 255);
        }
        obj.setDescription(description);
    }
    
    public void AppsDataOnDemand.setLogo(Apps obj, int index) {
        byte[] logo = String.valueOf(index).getBytes();
        obj.setLogo(logo);
    }
    
    public void AppsDataOnDemand.setRate(Apps obj, int index) {
        float rate = new Integer(index).floatValue();
        obj.setRate(rate);
    }
    
    public void AppsDataOnDemand.setSdk_version(Apps obj, int index) {
        String sdk_version = "sdk_version_" + index;
        if (sdk_version.length() > 16) {
            sdk_version = sdk_version.substring(0, 16);
        }
        obj.setSdk_version(sdk_version);
    }
    
    public Apps AppsDataOnDemand.getSpecificApps(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Apps obj = data.get(index);
        Long id = obj.getId();
        return Apps.findApps(id);
    }
    
    public Apps AppsDataOnDemand.getRandomApps() {
        init();
        Apps obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Apps.findApps(id);
    }
    
    public boolean AppsDataOnDemand.modifyApps(Apps obj) {
        return false;
    }
    
    public void AppsDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Apps.findAppsEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Apps' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Apps>();
        for (int i = 0; i < 10; i++) {
            Apps obj = getNewTransientApps(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
