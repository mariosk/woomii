// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.woomii.beta.frontend.areas;

import com.woomii.beta.frontend.areas.Areas;
import com.woomii.beta.frontend.areas.AreasDataOnDemand;
import com.woomii.beta.frontend.campaigns.CampaignsDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect AreasDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AreasDataOnDemand: @Component;
    
    private Random AreasDataOnDemand.rnd = new SecureRandom();
    
    private List<Areas> AreasDataOnDemand.data;
    
    @Autowired
    CampaignsDataOnDemand AreasDataOnDemand.campaignsDataOnDemand;
    
    public Areas AreasDataOnDemand.getNewTransientAreas(int index) {
        Areas obj = new Areas();
        setLat1(obj, index);
        setLat2(obj, index);
        setLat3(obj, index);
        setLat4(obj, index);
        setLng1(obj, index);
        setLng2(obj, index);
        setLng3(obj, index);
        setLng4(obj, index);
        return obj;
    }
    
    public void AreasDataOnDemand.setLat1(Areas obj, int index) {
        Double lat1 = new Integer(index).doubleValue();
        obj.setLat1(lat1);
    }
    
    public void AreasDataOnDemand.setLat2(Areas obj, int index) {
        Double lat2 = new Integer(index).doubleValue();
        obj.setLat2(lat2);
    }
    
    public void AreasDataOnDemand.setLat3(Areas obj, int index) {
        Double lat3 = new Integer(index).doubleValue();
        obj.setLat3(lat3);
    }
    
    public void AreasDataOnDemand.setLat4(Areas obj, int index) {
        Double lat4 = new Integer(index).doubleValue();
        obj.setLat4(lat4);
    }
    
    public void AreasDataOnDemand.setLng1(Areas obj, int index) {
        Double lng1 = new Integer(index).doubleValue();
        obj.setLng1(lng1);
    }
    
    public void AreasDataOnDemand.setLng2(Areas obj, int index) {
        Double lng2 = new Integer(index).doubleValue();
        obj.setLng2(lng2);
    }
    
    public void AreasDataOnDemand.setLng3(Areas obj, int index) {
        Double lng3 = new Integer(index).doubleValue();
        obj.setLng3(lng3);
    }
    
    public void AreasDataOnDemand.setLng4(Areas obj, int index) {
        Double lng4 = new Integer(index).doubleValue();
        obj.setLng4(lng4);
    }
    
    public Areas AreasDataOnDemand.getSpecificAreas(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Areas obj = data.get(index);
        Long id = obj.getId();
        return Areas.findAreas(id);
    }
    
    public Areas AreasDataOnDemand.getRandomAreas() {
        init();
        Areas obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Areas.findAreas(id);
    }
    
    public boolean AreasDataOnDemand.modifyAreas(Areas obj) {
        return false;
    }
    
    public void AreasDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Areas.findAreasEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Areas' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Areas>();
        for (int i = 0; i < 10; i++) {
            Areas obj = getNewTransientAreas(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
