// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.woomii.beta.frontend.campaigns;

import com.woomii.beta.frontend.apps.AppsDataOnDemand;
import com.woomii.beta.frontend.campaigns.Campaigns;
import com.woomii.beta.frontend.campaigns.CampaignsDataOnDemand;
import com.woomii.beta.types.CurrencyType;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect CampaignsDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CampaignsDataOnDemand: @Component;
    
    private Random CampaignsDataOnDemand.rnd = new SecureRandom();
    
    private List<Campaigns> CampaignsDataOnDemand.data;
    
    @Autowired
    AppsDataOnDemand CampaignsDataOnDemand.appsDataOnDemand;
    
    public Campaigns CampaignsDataOnDemand.getNewTransientCampaigns(int index) {
        Campaigns obj = new Campaigns();
        setArea_enabled(obj, index);
        setCredits_earn_at_installation_usera(obj, index);
        setCredits_earn_at_installation_userb(obj, index);
        setCredits_earn_at_transaction(obj, index);
        setCredits_expiration_date(obj, index);
        setCurrency(obj, index);
        setExpiration_date(obj, index);
        setLaunch_date(obj, index);
        setName(obj, index);
        setNum_of_credits(obj, index);
        setNum_of_credits_threshold(obj, index);
        setNum_of_referrals(obj, index);
        setNum_of_referrals_threshold(obj, index);
        setRgbcolor(obj, index);
        setStatus(obj, index);
        setWhen_to_change_demographics(obj, index);
        return obj;
    }
    
    public void CampaignsDataOnDemand.setArea_enabled(Campaigns obj, int index) {
        Boolean area_enabled = Boolean.TRUE;
        obj.setArea_enabled(area_enabled);
    }
    
    public void CampaignsDataOnDemand.setCredits_earn_at_installation_usera(Campaigns obj, int index) {
        int credits_earn_at_installation_usera = index;
        obj.setCredits_earn_at_installation_usera(credits_earn_at_installation_usera);
    }
    
    public void CampaignsDataOnDemand.setCredits_earn_at_installation_userb(Campaigns obj, int index) {
        int credits_earn_at_installation_userb = index;
        obj.setCredits_earn_at_installation_userb(credits_earn_at_installation_userb);
    }
    
    public void CampaignsDataOnDemand.setCredits_earn_at_transaction(Campaigns obj, int index) {
        int credits_earn_at_transaction = index;
        obj.setCredits_earn_at_transaction(credits_earn_at_transaction);
    }
    
    public void CampaignsDataOnDemand.setCredits_expiration_date(Campaigns obj, int index) {
        Date credits_expiration_date = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCredits_expiration_date(credits_expiration_date);
    }
    
    public void CampaignsDataOnDemand.setCurrency(Campaigns obj, int index) {
        CurrencyType currency = CurrencyType.class.getEnumConstants()[0];
        obj.setCurrency(currency);
    }
    
    public void CampaignsDataOnDemand.setExpiration_date(Campaigns obj, int index) {
        Date expiration_date = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setExpiration_date(expiration_date);
    }
    
    public void CampaignsDataOnDemand.setLaunch_date(Campaigns obj, int index) {
        Date launch_date = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setLaunch_date(launch_date);
    }
    
    public void CampaignsDataOnDemand.setName(Campaigns obj, int index) {
        String name = "name_" + index;
        if (name.length() > 64) {
            name = name.substring(0, 64);
        }
        obj.setName(name);
    }
    
    public void CampaignsDataOnDemand.setNum_of_credits(Campaigns obj, int index) {
        int num_of_credits = index;
        obj.setNum_of_credits(num_of_credits);
    }
    
    public void CampaignsDataOnDemand.setNum_of_credits_threshold(Campaigns obj, int index) {
        String num_of_credits_threshold = "num_of_credits_threshold_" + index;
        if (num_of_credits_threshold.length() > 32) {
            num_of_credits_threshold = num_of_credits_threshold.substring(0, 32);
        }
        obj.setNum_of_credits_threshold(num_of_credits_threshold);
    }
    
    public void CampaignsDataOnDemand.setNum_of_referrals(Campaigns obj, int index) {
        int num_of_referrals = index;
        obj.setNum_of_referrals(num_of_referrals);
    }
    
    public void CampaignsDataOnDemand.setNum_of_referrals_threshold(Campaigns obj, int index) {
        String num_of_referrals_threshold = "num_of_referrals_threshold_" + index;
        if (num_of_referrals_threshold.length() > 32) {
            num_of_referrals_threshold = num_of_referrals_threshold.substring(0, 32);
        }
        obj.setNum_of_referrals_threshold(num_of_referrals_threshold);
    }
    
    public void CampaignsDataOnDemand.setRgbcolor(Campaigns obj, int index) {
        String rgbcolor = "rgbc_" + index;
        if (rgbcolor.length() > 6) {
            rgbcolor = rgbcolor.substring(0, 6);
        }
        obj.setRgbcolor(rgbcolor);
    }
    
    public void CampaignsDataOnDemand.setStatus(Campaigns obj, int index) {
        Boolean status = Boolean.TRUE;
        obj.setStatus(status);
    }
    
    public void CampaignsDataOnDemand.setWhen_to_change_demographics(Campaigns obj, int index) {
        short when_to_change_demographics = new Integer(index).shortValue();
        obj.setWhen_to_change_demographics(when_to_change_demographics);
    }
    
    public Campaigns CampaignsDataOnDemand.getSpecificCampaigns(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Campaigns obj = data.get(index);
        Long id = obj.getId();
        return Campaigns.findCampaigns(id);
    }
    
    public Campaigns CampaignsDataOnDemand.getRandomCampaigns() {
        init();
        Campaigns obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Campaigns.findCampaigns(id);
    }
    
    public boolean CampaignsDataOnDemand.modifyCampaigns(Campaigns obj) {
        return false;
    }
    
    public void CampaignsDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Campaigns.findCampaignsEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Campaigns' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Campaigns>();
        for (int i = 0; i < 10; i++) {
            Campaigns obj = getNewTransientCampaigns(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
