// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.woomii.beta.frontend.customers;

import com.woomii.beta.frontend.customers.Customers;
import com.woomii.beta.frontend.customers.CustomersDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect CustomersDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CustomersDataOnDemand: @Component;
    
    private Random CustomersDataOnDemand.rnd = new SecureRandom();
    
    private List<Customers> CustomersDataOnDemand.data;
    
    public Customers CustomersDataOnDemand.getNewTransientCustomers(int index) {
        Customers obj = new Customers();
        setCust_id(obj, index);
        setEmail(obj, index);
        setFb_id(obj, index);
        setGoogle_id(obj, index);
        setLogo(obj, index);
        setName(obj, index);
        setPassword(obj, index);
        return obj;
    }
    
    public void CustomersDataOnDemand.setCust_id(Customers obj, int index) {
        String cust_id = "cust_id_" + index;
        if (cust_id.length() > 40) {
            cust_id = new Random().nextInt(10) + cust_id.substring(1, 40);
        }
        obj.setCust_id(cust_id);
    }
    
    public void CustomersDataOnDemand.setEmail(Customers obj, int index) {
        String email = "foo" + index + "@bar.com";
        if (email.length() > 32) {
            email = email.substring(0, 32);
        }
        obj.setEmail(email);
    }
    
    public void CustomersDataOnDemand.setFb_id(Customers obj, int index) {
        String fb_id = "fb_id_" + index;
        if (fb_id.length() > 16) {
            fb_id = fb_id.substring(0, 16);
        }
        obj.setFb_id(fb_id);
    }
    
    public void CustomersDataOnDemand.setGoogle_id(Customers obj, int index) {
        String google_id = "google_id_" + index;
        if (google_id.length() > 16) {
            google_id = google_id.substring(0, 16);
        }
        obj.setGoogle_id(google_id);
    }
    
    public void CustomersDataOnDemand.setLogo(Customers obj, int index) {
        byte[] logo = String.valueOf(index).getBytes();
        obj.setLogo(logo);
    }
    
    public void CustomersDataOnDemand.setName(Customers obj, int index) {
        String name = "name_" + index;
        if (name.length() > 64) {
            name = name.substring(0, 64);
        }
        obj.setName(name);
    }
    
    public void CustomersDataOnDemand.setPassword(Customers obj, int index) {
        String password = "password_" + index;
        if (password.length() > 32) {
            password = password.substring(0, 32);
        }
        obj.setPassword(password);
    }
    
    public Customers CustomersDataOnDemand.getSpecificCustomers(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Customers obj = data.get(index);
        Long id = obj.getId();
        return Customers.findCustomers(id);
    }
    
    public Customers CustomersDataOnDemand.getRandomCustomers() {
        init();
        Customers obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Customers.findCustomers(id);
    }
    
    public boolean CustomersDataOnDemand.modifyCustomers(Customers obj) {
        return false;
    }
    
    public void CustomersDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Customers.findCustomersEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Customers' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Customers>();
        for (int i = 0; i < 10; i++) {
            Customers obj = getNewTransientCustomers(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
