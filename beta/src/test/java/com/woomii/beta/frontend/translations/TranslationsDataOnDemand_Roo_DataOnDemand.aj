// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.woomii.beta.frontend.translations;

import com.woomii.beta.frontend.campaigns.CampaignsDataOnDemand;
import com.woomii.beta.frontend.languages.LanguagesDataOnDemand;
import com.woomii.beta.frontend.translations.Translations;
import com.woomii.beta.frontend.translations.TranslationsDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect TranslationsDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TranslationsDataOnDemand: @Component;
    
    private Random TranslationsDataOnDemand.rnd = new SecureRandom();
    
    private List<Translations> TranslationsDataOnDemand.data;
    
    @Autowired
    CampaignsDataOnDemand TranslationsDataOnDemand.campaignsDataOnDemand;
    
    @Autowired
    LanguagesDataOnDemand TranslationsDataOnDemand.languagesDataOnDemand;
    
    public Translations TranslationsDataOnDemand.getNewTransientTranslations(int index) {
        Translations obj = new Translations();
        setDonation_error_msg(obj, index);
        setDonation_msg(obj, index);
        setEnter_pin_msg(obj, index);
        setError_msg(obj, index);
        setMotto(obj, index);
        setPush_msg_after_installation(obj, index);
        setReferral_done_msg(obj, index);
        setReferral_error_msg(obj, index);
        setTerms(obj, index);
        setWelcome_msg(obj, index);
        return obj;
    }
    
    public void TranslationsDataOnDemand.setDonation_error_msg(Translations obj, int index) {
        String donation_error_msg = "donation_error_msg_" + index;
        if (donation_error_msg.length() > 128) {
            donation_error_msg = donation_error_msg.substring(0, 128);
        }
        obj.setDonation_error_msg(donation_error_msg);
    }
    
    public void TranslationsDataOnDemand.setDonation_msg(Translations obj, int index) {
        String donation_msg = "donation_msg_" + index;
        if (donation_msg.length() > 255) {
            donation_msg = donation_msg.substring(0, 255);
        }
        obj.setDonation_msg(donation_msg);
    }
    
    public void TranslationsDataOnDemand.setEnter_pin_msg(Translations obj, int index) {
        String enter_pin_msg = "enter_pin_msg_" + index;
        if (enter_pin_msg.length() > 255) {
            enter_pin_msg = enter_pin_msg.substring(0, 255);
        }
        obj.setEnter_pin_msg(enter_pin_msg);
    }
    
    public void TranslationsDataOnDemand.setError_msg(Translations obj, int index) {
        String error_msg = "error_msg_" + index;
        if (error_msg.length() > 128) {
            error_msg = error_msg.substring(0, 128);
        }
        obj.setError_msg(error_msg);
    }
    
    public void TranslationsDataOnDemand.setMotto(Translations obj, int index) {
        String motto = "motto_" + index;
        if (motto.length() > 128) {
            motto = motto.substring(0, 128);
        }
        obj.setMotto(motto);
    }
    
    public void TranslationsDataOnDemand.setPush_msg_after_installation(Translations obj, int index) {
        String push_msg_after_installation = "push_msg_after_installation_" + index;
        if (push_msg_after_installation.length() > 255) {
            push_msg_after_installation = push_msg_after_installation.substring(0, 255);
        }
        obj.setPush_msg_after_installation(push_msg_after_installation);
    }
    
    public void TranslationsDataOnDemand.setReferral_done_msg(Translations obj, int index) {
        String referral_done_msg = "referral_done_msg_" + index;
        if (referral_done_msg.length() > 128) {
            referral_done_msg = referral_done_msg.substring(0, 128);
        }
        obj.setReferral_done_msg(referral_done_msg);
    }
    
    public void TranslationsDataOnDemand.setReferral_error_msg(Translations obj, int index) {
        String referral_error_msg = "referral_error_msg_" + index;
        if (referral_error_msg.length() > 128) {
            referral_error_msg = referral_error_msg.substring(0, 128);
        }
        obj.setReferral_error_msg(referral_error_msg);
    }
    
    public void TranslationsDataOnDemand.setTerms(Translations obj, int index) {
        String terms = "terms_" + index;
        if (terms.length() > 255) {
            terms = terms.substring(0, 255);
        }
        obj.setTerms(terms);
    }
    
    public void TranslationsDataOnDemand.setWelcome_msg(Translations obj, int index) {
        String welcome_msg = "welcome_msg_" + index;
        if (welcome_msg.length() > 255) {
            welcome_msg = welcome_msg.substring(0, 255);
        }
        obj.setWelcome_msg(welcome_msg);
    }
    
    public Translations TranslationsDataOnDemand.getSpecificTranslations(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Translations obj = data.get(index);
        Long id = obj.getId();
        return Translations.findTranslations(id);
    }
    
    public Translations TranslationsDataOnDemand.getRandomTranslations() {
        init();
        Translations obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Translations.findTranslations(id);
    }
    
    public boolean TranslationsDataOnDemand.modifyTranslations(Translations obj) {
        return false;
    }
    
    public void TranslationsDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Translations.findTranslationsEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Translations' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Translations>();
        for (int i = 0; i < 10; i++) {
            Translations obj = getNewTransientTranslations(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
